import { createPopper } from '@popperjs/core';
import { isString } from './type-check';
import { makeCenteredPopper } from './popper-options';

/**
 * Ensure class prefix ends in `-`
 * @param {string} prefix The prefix to prepend to the class names generated by nano-css
 * @return {string} The prefix ending in `-`
 */
export function normalizePrefix(prefix) {
  if (!isString(prefix) || prefix === '') {
    return '';
  }

  return prefix.charAt(prefix.length - 1) !== '-' ? `${prefix}-` : prefix;
}

/**
 * Checks if options.attachTo.element is a string, and if so, tries to find the element
 * @param {Step} step The step instance
 * @returns {{element, on}}
 * `element` is a qualified HTML Element
 * `on` is a string position value
 */
export function parseAttachTo(step) {
  const options = step.options.attachTo || {};
  const returnOpts = Object.assign({}, options);

  if (isString(options.element)) {
    // Can't override the element in user opts reference because we can't
    // guarantee that the element will exist in the future.
    try {
      returnOpts.element = document.querySelector(options.element);
    } catch(e) {
      // TODO
    }
    if (!returnOpts.element) {
      console.error(
        `The element for this Shepherd step was not found ${options.element}`
      );
    }
  }

  return returnOpts;
}

/**
 * Determines options for the tooltip and initializes
 * `step.tooltip` as a Tether instance.
 * @param {Step} step The step instance
 */
export function setupTooltip(step) {
  if (step.tooltip) {
    step.tooltip.destroy();
  }

  const attachToOpts = parseAttachTo(step);
  const { element, popperOptions, target } = getPopperOptions(attachToOpts, step);
  // console.log(popperOptions.modifiers);

  step.tooltip = createPopper(target, element, popperOptions);
  step.target = attachToOpts.element;
}

/**
 * Create a unique id for steps, tours, modals, etc
 * @return {string}
 */
export function uuid() {
  let d = Date.now();
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
    const r = (d + Math.random() * 16) % 16 | 0;
    d = Math.floor(d / 16);
    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);
  });
}

/**
 * Gets the `Popper` options from a set of base `attachTo` options
 * @param attachToOptions
 * @param {Step} step The step instance
 * @return {Object}
 * @private
 */
export function getPopperOptions(attachToOptions, step) {
  let popperOptions = {};
  let target = document.body;

  if (!attachToOptions.element || !attachToOptions.on) {
    popperOptions = makeCenteredPopper(step);
    console.log(popperOptions);

  } else {
    popperOptions.placement = attachToOptions.on || 'right';
    target = attachToOptions.element;
  }

  if (step.options.popperOptions) {
    popperOptions = {
      ...popperOptions,
      ...step.options.popperOptions
    };

    if (popperOptions.modifiers.length > 0) {
      console.log(popperOptions.modifiers);

      popperOptions.modifiers = [
        ...new Set([
          ...popperOptions.modifiers,
          ...step.options.popperOptions.modifiers
        ])];
    }
  }

  return { element: step.el, popperOptions, target };
}
