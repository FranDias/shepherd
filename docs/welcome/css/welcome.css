html,
body {
  height: 100%;
  overflow: hidden;
}

body {
  background-color: #62c462;
  background-image: linear-gradient(-45deg, #62c462, #75beaa);
  font-family: "proxima-nova", "Helvetica Neue", sans-serif;
  margin: 0;
}

.button {
  border: 2px solid #ffffff;
  color: #ffffff;
  cursor: pointer;
  display: inline-block;
  font-size: 0.8em;
  font-weight: 500;
  letter-spacing: 3px;
  line-height: 1.3em;
  padding: 1em 1.25em;
  text-decoration: none;
  text-transform: uppercase;
  width: 140px;
}

.button.dark {
  background: #ffffff;
  color: #75beaa;
}

@media (max-width: 568px) {
  .button {
    display: block;
    margin: 1em auto 0;
  }
}

.hero-scroll {
  height: 100%;
  overflow: auto;
  -webkit-overflow-scrolling: touch;
  width: 100%;
}

.hero-outer {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  display: table;
  height: 100%;
  padding: 20px 0;
  width: 100%;
}

.hero-outer .hero-inner {
  margin: 0 auto 1em;
  text-align: center;
  width: 540px;
}

@media (max-width: 600px) {
  .hero-outer .hero-inner {
    width: 340px;
  }
}

@media (max-width: 360px) {
  .hero-outer .hero-inner {
    width: 200px;
  }
}

.hero-outer .hero-inner h1,
.hero-outer .hero-inner h2,
.hero-outer .hero-inner h3,
.hero-outer .hero-inner p {
  color: #ffffff;
  font-weight: normal;
  line-height: 1;
  margin: 0 0 20px;
}

.hero-outer .hero-inner h3 {
  font-size: 1.3em;
  padding-top: 13px;
}

.hero-outer .hero-inner h1 {
  padding-top: 10px;
}

.hero-outer .hero-inner > * {
  opacity: 0.3;
  pointer-events: none;
  -webkit-transition: opacity 0.4s;
  transition: opacity 0.4s;
}

body:not(.shepherd-active) .hero-outer .hero-inner > * {
  opacity: 1;
  pointer-events: auto;
}

.hero-outer .hero-inner .shepherd-target.shepherd-enabled {
  opacity: 1;
  pointer-events: auto;
}

.hero-outer .hero-followup {
  padding-top: 20px;
}

pre {
  border: 1px solid rgba(0, 0, 0, 0.15);
  line-height: 1.4em;
}

/**
 * Styles to support usage of Tippy.js tooltips (https://atomiks.github.io/tippyjs)
 */
/**
 * Tippy tooltips have the following base structure:
 *
 * <div class="tippy-popper" x-placement="top">
 *   <div class="tippy-tooltip">
 *     <div class="tippy-content">
 *       [[ Content Here ]]
 *     </div>
 *   </div>
 * </div>
 */
.tippy-popper {
  z-index: 9999;
}

.tippy-popper .tippy-arrow {
  border: 16px solid transparent;
  content: '';
  display: block;
  height: 0;
  pointer-events: none;
  position: absolute;
  width: 0;
}

.tippy-popper[x-placement^='top'] {
  margin-bottom: 16px;
}

.tippy-popper[x-placement^='top'] .tippy-arrow {
  border-bottom: 0;
  border-top-color: #ffffff;
  left: calc(50% - 16px);
}

.tippy-popper[x-placement^='bottom'] {
  margin-top: 16px;
}

.tippy-popper[x-placement^='bottom'] .tippy-arrow {
  border-bottom-color: #eeeeee;
  border-top: 0;
  left: calc(50% - 16px);
}

.tippy-popper[x-placement^='left'] {
  margin-right: 16px;
}

.tippy-popper[x-placement^='left'] .tippy-arrow {
  border-left-color: #ffffff;
  border-right: 0;
  margin-top: -16px;
  top: calc(50% - 16px);
}

.tippy-popper[x-placement^='right'] {
  margin-left: 16px;
}

.tippy-popper[x-placement^='right'] .tippy-arrow {
  border-left: 0;
  border-right-color: #ffffff;
  top: calc(50% - 16px);
}

.tippy-popper .tippy-tooltip {
  background-color: rgba(0, 0, 0, 0);
  max-height: 100%;
  max-width: 100%;
  padding: 0;
  width: 420px;
}

.shepherd-element, .shepherd-element:after, .shepherd-element:before,
.shepherd-element *,
.shepherd-element *:after,
.shepherd-element *:before {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
}

.shepherd-element {
  -webkit-filter: drop-shadow(0 1px 4px rgba(0, 0, 0, 0.2));
          filter: drop-shadow(0 1px 4px rgba(0, 0, 0, 0.2));
}

.shepherd-element.shepherd-has-title .shepherd-content header {
  background: #eeeeee;
  padding: 1em;
}

.shepherd-element .shepherd-content {
  background: #ffffff;
  font-size: inherit;
  padding: 0;
}

.shepherd-element .shepherd-content header {
  *zoom: 1;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  border-top-left-radius: 5px;
  border-top-right-radius: 5px;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  line-height: 2em;
  padding: 0.75em 0.75em 0;
}

.shepherd-element .shepherd-content header:after {
  clear: both;
  content: '';
  display: table;
}

.shepherd-element .shepherd-content header .shepherd-title,
.shepherd-element .shepherd-content header .shepherd-cancel-link {
  font-weight: normal;
  margin: 0;
  padding: 0;
  position: relative;
  vertical-align: middle;
}

.shepherd-element .shepherd-content header .shepherd-title {
  color: rgba(0, 0, 0, 0.75);
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-flex: 1;
      -ms-flex: 1 0 auto;
          flex: 1 0 auto;
  font-size: 1.1em;
}

.shepherd-element .shepherd-content header .shepherd-cancel-link {
  color: rgba(179, 179, 179, 0.75);
  font-size: 2em;
  margin-left: auto;
  text-decoration: none;
  -webkit-transition: color 0.5s ease;
  transition: color 0.5s ease;
}

.shepherd-element .shepherd-content header .shepherd-cancel-link:before {
  content: '\D7';
}

.shepherd-element .shepherd-content header .shepherd-cancel-link:hover {
  color: rgba(0, 0, 0, 0.75);
}

.shepherd-element .shepherd-content .shepherd-text {
  color: rgba(0, 0, 0, 0.75);
  line-height: 1.3em;
  padding: 0.75em;
}

.shepherd-element .shepherd-content .shepherd-text a,
.shepherd-element .shepherd-content .shepherd-text a:visited,
.shepherd-element .shepherd-content .shepherd-text a:active {
  border-bottom: 1px dotted;
  border-bottom-color: rgba(0, 0, 0, 0.75);
  color: rgba(0, 0, 0, 0.75);
  text-decoration: none;
}

.shepherd-element .shepherd-content .shepherd-text a:hover,
.shepherd-element .shepherd-content .shepherd-text a:visited:hover,
.shepherd-element .shepherd-content .shepherd-text a:active:hover {
  border-bottom-style: solid;
}

.shepherd-element .shepherd-content .shepherd-text p {
  margin-top: 0;
}

.shepherd-element .shepherd-content .shepherd-text p:last-child {
  margin-bottom: 0;
}

.shepherd-element .shepherd-content footer {
  border-bottom-left-radius: 5px;
  border-bottom-right-radius: 5px;
  padding: 0 0.75em 0.75em;
}

.shepherd-element .shepherd-content footer .shepherd-buttons {
  list-style: none;
  margin: 0;
  padding: 0;
  text-align: right;
}

.shepherd-element .shepherd-content footer .shepherd-buttons li {
  display: inline;
  margin: 0 0.5em 0 0;
}

.shepherd-element .shepherd-content footer .shepherd-buttons li:last-child {
  margin-right: 0;
}

.shepherd-element .shepherd-content footer .shepherd-buttons li .shepherd-button {
  display: inline-block;
  *display: inline;
  vertical-align: middle;
  *vertical-align: auto;
  *zoom: 1;
  background: #55a892;
  border: 0;
  border-radius: 3px;
  color: rgba(255, 255, 255, 0.75);
  cursor: pointer;
  font-family: inherit;
  font-size: 0.8em;
  letter-spacing: 0.1em;
  line-height: 1em;
  padding: 0.75em 2em;
  text-transform: uppercase;
  -webkit-transition: all 0.5s ease;
  transition: all 0.5s ease;
}

.shepherd-element .shepherd-content footer .shepherd-buttons li .shepherd-button:hover {
  background: #448675;
}

.shepherd-element .shepherd-content footer .shepherd-buttons li .shepherd-button.shepherd-button-secondary {
  background: #e5e5e5;
  color: rgba(0, 0, 0, 0.75);
}

.shepherd-element .shepherd-content footer .shepherd-buttons li .shepherd-button.shepherd-button-secondary:hover {
  background: #cbcbcb;
  color: rgba(0, 0, 0, 0.75);
}

.tippy-popper .tippy-arrow {
  border: 16px solid transparent;
  content: '';
  display: block;
  height: 0;
  position: absolute;
  width: 0;
}

.tippy-popper[x-placement^='top'] {
  margin-bottom: 16px;
}

.tippy-popper[x-placement^='top'] .tippy-arrow {
  border-bottom: 0;
  border-top-color: #ffffff;
  left: calc(50% - 16px);
}

.tippy-popper[x-placement^='bottom'] {
  margin-top: 16px;
}

.tippy-popper[x-placement^='bottom'] .tippy-arrow {
  border-bottom-color: #ffffff;
  border-top: 0;
  left: calc(50% - 16px);
}

.tippy-popper[x-placement^='left'] {
  margin-right: 16px;
}

.tippy-popper[x-placement^='left'] .tippy-arrow {
  border-left-color: #ffffff;
  border-right: 0;
  margin-top: -16px;
  top: calc(50% - 16px);
}

.tippy-popper[x-placement^='right'] {
  margin-left: 16px;
}

.tippy-popper[x-placement^='right'] .tippy-arrow {
  border-left: 0;
  border-right-color: #ffffff;
  top: calc(50% - 16px);
}

.tippy-popper .shepherd-welcome:not(.shepherd-has-title) .shepherd-content header,
.tippy-popper .shepherd-welcome:not(.shepherd-has-title) .shepherd-content .shepherd-header {
  padding-bottom: 0;
}

.tippy-popper .shepherd-welcome .shepherd-content header,
.tippy-popper .shepherd-welcome .shepherd-content .shepherd-header {
  background: #ffffff;
}

.tippy-popper .shepherd-welcome .shepherd-content .shepherd-text {
  color: #336457;
}

/*# sourceURL=/Users/brian/ship-shape/shepherd/docs/welcome/scss/welcome.scss */
/*# sourceURL=/Users/brian/ship-shape/shepherd/src/scss/_tippy.scss */
/*# sourceURL=/Users/brian/ship-shape/shepherd/src/scss/tippy/_base-tooltips.scss */
/*# sourceURL=/Users/brian/ship-shape/shepherd/src/scss/_variables.scss */
/*# sourceURL=/Users/brian/ship-shape/shepherd/src/scss/tippy/_popper-theme-arrows.scss */
/*# sourceURL=/Users/brian/ship-shape/shepherd/src/scss/helpers/_box-sizing.scss */
/*# sourceURL=/Users/brian/ship-shape/shepherd/src/scss/_base.scss */
/*# sourceURL=/Users/brian/ship-shape/shepherd/docs/welcome/scss/welcome.scss */
/*# sourceURL=/Users/brian/ship-shape/shepherd/src/scss/mixins/_pie-clearfix.scss */
/*# sourceURL=/Users/brian/ship-shape/shepherd/src/scss/_functions.scss */
/*# sourceURL=/Users/brian/ship-shape/shepherd/src/scss/mixins/_inline-block.scss */
/*# sourceURL=/Users/brian/ship-shape/shepherd/src/scss/mixins/_shepherd-button.scss */
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9icmlhbi9zaGlwLXNoYXBlL3NoZXBoZXJkL2RvY3Mvd2VsY29tZS9zY3NzL3dlbGNvbWUuc2NzcyIsIi9Vc2Vycy9icmlhbi9zaGlwLXNoYXBlL3NoZXBoZXJkL3NyYy9zY3NzL190aXBweS5zY3NzIiwiL1VzZXJzL2JyaWFuL3NoaXAtc2hhcGUvc2hlcGhlcmQvc3JjL3Njc3MvdGlwcHkvX2Jhc2UtdG9vbHRpcHMuc2NzcyIsIi9Vc2Vycy9icmlhbi9zaGlwLXNoYXBlL3NoZXBoZXJkL3NyYy9zY3NzL192YXJpYWJsZXMuc2NzcyIsIi9Vc2Vycy9icmlhbi9zaGlwLXNoYXBlL3NoZXBoZXJkL3NyYy9zY3NzL3RpcHB5L19wb3BwZXItdGhlbWUtYXJyb3dzLnNjc3MiLCIvVXNlcnMvYnJpYW4vc2hpcC1zaGFwZS9zaGVwaGVyZC9zcmMvc2Nzcy9oZWxwZXJzL19ib3gtc2l6aW5nLnNjc3MiLCIvVXNlcnMvYnJpYW4vc2hpcC1zaGFwZS9zaGVwaGVyZC9zcmMvc2Nzcy9fYmFzZS5zY3NzIiwiL1VzZXJzL2JyaWFuL3NoaXAtc2hhcGUvc2hlcGhlcmQvZG9jcy93ZWxjb21lL3Njc3Mvd2VsY29tZS5zY3NzIiwiL1VzZXJzL2JyaWFuL3NoaXAtc2hhcGUvc2hlcGhlcmQvc3JjL3Njc3MvbWl4aW5zL19waWUtY2xlYXJmaXguc2NzcyIsIi9Vc2Vycy9icmlhbi9zaGlwLXNoYXBlL3NoZXBoZXJkL3NyYy9zY3NzL19mdW5jdGlvbnMuc2NzcyIsIi9Vc2Vycy9icmlhbi9zaGlwLXNoYXBlL3NoZXBoZXJkL3NyYy9zY3NzL21peGlucy9faW5saW5lLWJsb2NrLnNjc3MiLCIvVXNlcnMvYnJpYW4vc2hpcC1zaGFwZS9zaGVwaGVyZC9zcmMvc2Nzcy9taXhpbnMvX3NoZXBoZXJkLWJ1dHRvbi5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFBOztFQUVFLGFBQVk7RUFDWixpQkFBZ0I7Q0FDakI7O0FBRUQ7RUFDRSwwQkFBa0M7RUFDbEMsNERB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QiwwQkFBeUI7Q0xvR2hCOztBQTNHWDtFS1VJLG9CQUErQztDQUNoRDs7QUxYSDtFS2NJLG9CUmpCMkU7RVFrQjNFLDJCRmpCZTtDRXVCaEI7O0FMckJIO0VLa0JNLG9CQUFpRDtFQUNqRCwyQkFBa0U7Q0FDbkU7O0FYK0ZMO0VJeEhJLCtCQUFxQztFQUNyQyxZQUFXO0VBQ1gsZUFBYztFQUNkLFVBQVM7RUFFVCxtQkFBa0I7RUFDbEIsU0FBUTtDQUNUOztBSmlISDtFSTVHSSxvQkFkd0M7Q0FxQnpDOztBSnFHSDtFSXpHTSxpQkFBZ0I7RUFDaEIsMEJEYjRCO0VDYzVCLHVCQUFnQztDQUNqQzs7QUpzR0w7RUlsR0ksaUJBeEJ3QztDQStCekM7O0FKMkZIO0VJL0ZNLDZCSmdHNEM7RUkvRjVDLGNBQWE7RUFDYix1QkFBZ0M7Q0FDakM7O0FKNEZMO0VJeEZJLG1CQWxDd0M7Q0EwQ3pDOztBSmdGSDtFSXJGTSwyQkRoQzRCO0VDaUM1QixnQkFBZTtFQUNmLGtCQXZDc0M7RUF3Q3RDLHNCQUErQjtDQUNoQzs7QUppRkw7RUk3RUksa0JBN0N3QztDQW9EekM7O0FKc0VIO0VJMUVNLGVBQWM7RUFDZCw0QkQ1QzRCO0VDNkM1QixzQkFBK0I7Q0FDaEM7O0FKdUVMOztFQU9RLGtCQUFpQjtDQUNsQjs7QUFSUDs7RUFjUSxvQkFBbUI7Q0FDcEI7O0FBZlA7RUFrQlEsZUFBMEM7Q0FDM0MiLCJmaWxlIjoid2VsY29tZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlbWluZ1xuJHNoZXBoZXJkLXRoZW1lLXByaW1hcnk6ICM1NWE4OTIgIWRlZmF1bHQ7XG4kc2hlcGhlcmQtaGVhZGVyLWJhY2tncm91bmQ6ICNlZWVlZWUgIWRlZmF1bHQ7XG4kc2hlcGhlcmQtZWxlbWVudC13aWR0aDogNDIwcHggIWRlZmF1bHQ7XG5cbi8vIERvY3NcbiRjb2xvci13aGl0ZTogI2ZmZmZmZiAhZGVmYXVsdDtcblxuaHRtbCxcbmJvZHkge1xuICBoZWlnaHQ6IDEwMCU7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG5cbmJvZHkge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoOTgsIDE5NiwgOTgpO1xuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoLTQ1ZGVnLCByZ2IoOTgsIDE5NiwgOTgpLCByZ2IoMTE3LCAxOTAsIDE3MCkpO1xuICBmb250LWZhbWlseTogXCJwcm94aW1hLW5vdmFcIiwgXCJIZWx2ZXRpY2EgTmV1ZVwiLCBzYW5zLXNlcmlmO1xuICBtYXJnaW46IDA7XG59XG5cbi5idXR0b24ge1xuICBib3JkZXI6IDJweCBzb2xpZCAkY29sb3Itd2hpdGU7XG4gIGNvbG9yOiAkY29sb3Itd2hpdGU7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBmb250LXNpemU6IDAuOGVtO1xuICBmb250LXdlaWdodDogNTAwO1xuICBsZXR0ZXItc3BhY2luZzogM3B4O1xuICBsaW5lLWhlaWdodDogMS4zZW07XG4gIHBhZGRpbmc6IDFlbSAxLjI1ZW07XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgd2lkdGg6IDE0MHB4O1xuXG4gICYuZGFyayB7XG4gICAgYmFja2dyb3VuZDogJGNvbG9yLXdoaXRlO1xuICAgIGNvbG9yOiByZ2IoMTE3LCAxOTAsIDE3MCk7XG4gIH1cblxuICBAbWVkaWEgKG1heC13aWR0aDogNTY4cHgpIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBtYXJnaW46IDFlbSBhdXRvIDA7XG4gIH1cbn1cblxuLmhlcm8tc2Nyb2xsIHtcbiAgaGVpZ2h0OiAxMDAlO1xuICBvdmVyZmxvdzogYXV0bztcbiAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoO1xuICB3aWR0aDogMTAwJTtcbn1cblxuLmhlcm8tb3V0ZXIge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBkaXNwbGF5OiB0YWJsZTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBwYWRkaW5nOiAyMHB4IDA7XG4gIHdpZHRoOiAxMDAlO1xuXG4gIC5oZXJvLWlubmVyIHtcbiAgICBtYXJnaW46IDAgYXV0byAxZW07XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIHdpZHRoOiA1NDBweDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA2MDBweCkge1xuICAgICAgd2lkdGg6IDM0MHB4O1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAzNjBweCkge1xuICAgICAgd2lkdGg6IDIwMHB4O1xuICAgIH1cblxuICAgIGgxLFxuICAgIGgyLFxuICAgIGgzLFxuICAgIHAge1xuICAgICAgY29sb3I6ICRjb2xvci13aGl0ZTtcbiAgICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gICAgICBsaW5lLWhlaWdodDogMTtcbiAgICAgIG1hcmdpbjogMCAwIDIwcHg7XG4gICAgfVxuXG4gICAgaDMge1xuICAgICAgZm9udC1zaXplOiAxLjNlbTtcbiAgICAgIHBhZGRpbmctdG9wOiAxM3B4O1xuICAgIH1cblxuICAgIGgxIHtcbiAgICAgIHBhZGRpbmctdG9wOiAxMHB4O1xuICAgIH1cblxuICAgID4gKiB7XG4gICAgICBvcGFjaXR5OiAwLjM7XG4gICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMC40cztcblxuICAgICAgYm9keTpub3QoLnNoZXBoZXJkLWFjdGl2ZSkgJiB7XG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBhdXRvO1xuICAgICAgfVxuICAgIH1cblxuICAgIC5zaGVwaGVyZC10YXJnZXQuc2hlcGhlcmQtZW5hYmxlZCB7XG4gICAgICBvcGFjaXR5OiAxO1xuICAgICAgcG9pbnRlci1ldmVudHM6IGF1dG87XG4gICAgfVxuICB9XG5cbiAgLmhlcm8tZm9sbG93dXAge1xuICAgIHBhZGRpbmctdG9wOiAyMHB4O1xuICB9XG59XG5cbnByZSB7XG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xNSk7XG4gIGxpbmUtaGVpZ2h0OiAxLjRlbTtcbn1cblxuLy8gSW1wb3J0IGJhc2UgdGhlbWVcbkBpbXBvcnQgJy4uLy4uLy4uL3NyYy9zY3NzL2Jhc2UnO1xuXG4udGlwcHktcG9wcGVyIHtcbiAgQGluY2x1ZGUgcG9wcGVyLXRoZW1lLWFycm93cygkaGVhZGVyLWJnOiAjZmZmZmZmKTtcblxuICAuc2hlcGhlcmQtd2VsY29tZSB7XG4gICAgJjpub3QoLnNoZXBoZXJkLWhhcy10aXRsZSkgLnNoZXBoZXJkLWNvbnRlbnQge1xuICAgICAgaGVhZGVyLFxuICAgICAgLnNoZXBoZXJkLWhlYWRlciB7XG4gICAgICAgIHBhZGRpbmctYm90dG9tOiAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIC5zaGVwaGVyZC1jb250ZW50IHtcbiAgICAgIGhlYWRlcixcbiAgICAgIC5zaGVwaGVyZC1oZWFkZXIge1xuICAgICAgICBiYWNrZ3JvdW5kOiAjZmZmZmZmO1xuICAgICAgfVxuXG4gICAgICAuc2hlcGhlcmQtdGV4dCB7XG4gICAgICAgIGNvbG9yOiBkYXJrZW4oJHNoZXBoZXJkLXRoZW1lLXByaW1hcnksIDIwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogU3R5bGVzIHRvIHN1cHBvcnQgdXNhZ2Ugb2YgVGlwcHkuanMgdG9vbHRpcHMgKGh0dHBzOi8vYXRvbWlrcy5naXRodWIuaW8vdGlwcHlqcylcbiAqL1xuXG5AaW1wb3J0ICd0aXBweS9iYXNlLXRvb2x0aXBzJztcbiIsIkBpbXBvcnQgJ3BvcHBlci10aGVtZS1hcnJvd3MnO1xuXG4vKipcbiAqIFRpcHB5IHRvb2x0aXBzIGhhdmUgdGhlIGZvbGxvd2luZyBiYXNlIHN0cnVjdHVyZTpcbiAqXG4gKiA8ZGl2IGNsYXNzPVwidGlwcHktcG9wcGVyXCIgeC1wbGFjZW1lbnQ9XCJ0b3BcIj5cbiAqICAgPGRpdiBjbGFzcz1cInRpcHB5LXRvb2x0aXBcIj5cbiAqICAgICA8ZGl2IGNsYXNzPVwidGlwcHktY29udGVudFwiPlxuICogICAgICAgW1sgQ29udGVudCBIZXJlIF1dXG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZGl2PlxuICogPC9kaXY+XG4gKi9cblxuLnRpcHB5LXBvcHBlciB7XG4gIEBpbmNsdWRlIHBvcHBlci10aGVtZS1hcnJvd3MoJGFycm93LXNpemU6ICRhcnJvdy1zaXplLCAkYXJyb3ctcG9pbnRlci1ldmVudHM6ICRhcnJvdy1wb2ludGVyLWV2ZW50cyk7XG5cbiAgei1pbmRleDogJHNoZXBoZXJkLWVsZW1lbnQtei1pbmRleDtcblxuICAmIC50aXBweS10b29sdGlwIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDApO1xuICAgIG1heC1oZWlnaHQ6ICRzaGVwaGVyZC1lbGVtZW50LW1heC1oZWlnaHQ7XG4gICAgbWF4LXdpZHRoOiAkc2hlcGhlcmQtZWxlbWVudC1tYXgtd2lkdGg7XG4gICAgcGFkZGluZzogMDtcbiAgICB3aWR0aDogJHNoZXBoZXJkLWVsZW1lbnQtd2lkdGg7XG4gIH1cbn1cblxuIiwiQGltcG9ydCAnZnVuY3Rpb25zJztcblxuLy8gVGhlbWUgY29sb3JzXG4kc2hlcGhlcmQtdGhlbWUtcHJpbWFyeTogIzMyODhlNiAhZGVmYXVsdDtcbiRzaGVwaGVyZC10aGVtZS1zZWNvbmRhcnk6IGRlc2F0dXJhdGUobGlnaHRlbigkc2hlcGhlcmQtdGhlbWUtcHJpbWFyeSwgNDApLCA3MCkgIWRlZmF1bHQ7XG4kc2hlcGhlcmQtdGV4dC1iYWNrZ3JvdW5kOiAjZmZmZmZmICFkZWZhdWx0O1xuJHNoZXBoZXJkLWhlYWRlci1iYWNrZ3JvdW5kOiBkYXJrZW4oJHNoZXBoZXJkLXRleHQtYmFja2dyb3VuZCwgMTApICFkZWZhdWx0O1xuXG4kc2hlcGhlcmQtdGhlbWUtdGV4dC1jb2xvcnM6IChcbiAgcHJpbWFyeTogcmdiYShzZXQtdGV4dC1jb2xvcigkc2hlcGhlcmQtdGhlbWUtcHJpbWFyeSksIDAuNzUpLFxuICBzZWNvbmRhcnk6IHJnYmEoc2V0LXRleHQtY29sb3IoJHNoZXBoZXJkLXRoZW1lLXNlY29uZGFyeSksIDAuNzUpLFxuICBoZWFkZXI6IHJnYmEoc2V0LXRleHQtY29sb3IoJHNoZXBoZXJkLWhlYWRlci1iYWNrZ3JvdW5kKSwgMC43NSksXG4gIHRleHQ6IHJnYmEoc2V0LXRleHQtY29sb3IoJHNoZXBoZXJkLXRleHQtYmFja2dyb3VuZCksIDAuNzUpXG4pICFkZWZhdWx0O1xuXG4vLyBUaGVtZSBvcHRpb25zXG4kc2hlcGhlcmQtZWxlbWVudC13aWR0aDogNDAwcHggIWRlZmF1bHQ7XG4kc2hlcGhlcmQtZWxlbWVudC1ib3JkZXItcmFkaXVzOiA1cHggIWRlZmF1bHQ7XG4kc2hlcGhlcmQtZWxlbWVudC1tYXgtaGVpZ2h0OiAxMDAlICFkZWZhdWx0O1xuJHNoZXBoZXJkLWVsZW1lbnQtbWF4LXdpZHRoOiAxMDAlICFkZWZhdWx0O1xuJHNoZXBoZXJkLWVsZW1lbnQtei1pbmRleDogOTk5OSAhZGVmYXVsdDtcbiRzaGVwaGVyZC10ZXh0LWxpbmUtaGVpZ2h0OiAxLjNlbSAhZGVmYXVsdDtcbiRzaGVwaGVyZC1idXR0b24tYm9yZGVyLXJhZGl1czogM3B4ICFkZWZhdWx0O1xuJHVzZS1kcm9wLXNoYWRvdzogdHJ1ZSAhZGVmYXVsdDtcblxuLy8gUG9wcGVyIG9wdGlvbnNcbiRhcnJvdy1wb2ludGVyLWV2ZW50czogbm9uZSAhZGVmYXVsdDtcbiRhcnJvdy1zaXplOiAxNnB4ICFkZWZhdWx0O1xuIiwiQG1peGluIHBvcHBlci10aGVtZS1hcnJvd3MoJGFycm93LXNpemU6IDE2cHgsICRhcnJvdy1wb2ludGVyLWV2ZW50czogbnVsbCwgJHRleHQtYmc6ICRzaGVwaGVyZC10ZXh0LWJhY2tncm91bmQsICRoZWFkZXItYmc6ICRzaGVwaGVyZC1oZWFkZXItYmFja2dyb3VuZCkge1xuICAudGlwcHktYXJyb3cge1xuICAgIGJvcmRlcjogJGFycm93LXNpemUgc29saWQgdHJhbnNwYXJlbnQ7XG4gICAgY29udGVudDogJyc7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgaGVpZ2h0OiAwO1xuICAgIHBvaW50ZXItZXZlbnRzOiAkYXJyb3ctcG9pbnRlci1ldmVudHM7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHdpZHRoOiAwO1xuICB9XG5cbiAgLy8gQ2VudGVycyBhbmQgbWlkZGxlc1xuXG4gICZbeC1wbGFjZW1lbnRePSd0b3AnXSB7XG4gICAgbWFyZ2luLWJvdHRvbTogJGFycm93LXNpemU7XG5cbiAgICAudGlwcHktYXJyb3cge1xuICAgICAgYm9yZGVyLWJvdHRvbTogMDtcbiAgICAgIGJvcmRlci10b3AtY29sb3I6ICR0ZXh0LWJnO1xuICAgICAgbGVmdDogY2FsYyg1MCUgLSAjeyRhcnJvdy1zaXplfSk7XG4gICAgfVxuICB9XG5cbiAgJlt4LXBsYWNlbWVudF49J2JvdHRvbSddIHtcbiAgICBtYXJnaW4tdG9wOiAkYXJyb3ctc2l6ZTtcblxuICAgIC50aXBweS1hcnJvdyB7XG4gICAgICBib3JkZXItYm90dG9tLWNvbG9yOiAkaGVhZGVyLWJnO1xuICAgICAgYm9yZGVyLXRvcDogMDtcbiAgICAgIGxlZnQ6IGNhbGMoNTAlIC0gI3skYXJyb3ctc2l6ZX0pO1xuICAgIH1cbiAgfVxuXG4gICZbeC1wbGFjZW1lbnRePSdsZWZ0J10ge1xuICAgIG1hcmdpbi1yaWdodDogJGFycm93LXNpemU7XG5cbiAgICAudGlwcHktYXJyb3cge1xuICAgICAgYm9yZGVyLWxlZnQtY29sb3I6ICR0ZXh0LWJnO1xuICAgICAgYm9yZGVyLXJpZ2h0OiAwO1xuICAgICAgbWFyZ2luLXRvcDogLSRhcnJvdy1zaXplO1xuICAgICAgdG9wOiBjYWxjKDUwJSAtICN7JGFycm93LXNpemV9KTtcbiAgICB9XG4gIH1cblxuICAmW3gtcGxhY2VtZW50Xj0ncmlnaHQnXSB7XG4gICAgbWFyZ2luLWxlZnQ6ICRhcnJvdy1zaXplO1xuXG4gICAgLnRpcHB5LWFycm93IHtcbiAgICAgIGJvcmRlci1sZWZ0OiAwO1xuICAgICAgYm9yZGVyLXJpZ2h0LWNvbG9yOiAkdGV4dC1iZztcbiAgICAgIHRvcDogY2FsYyg1MCUgLSAjeyRhcnJvdy1zaXplfSk7XG4gICAgfVxuICB9XG59XG5cbiIsIkBtaXhpbiBib3gtc2l6aW5nKCkge1xuICAuc2hlcGhlcmQtZWxlbWVudCxcbiAgLnNoZXBoZXJkLWVsZW1lbnQgKiB7XG4gICAgJixcbiAgICAmOmFmdGVyLFxuICAgICY6YmVmb3JlIHtcbiAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgfVxuICB9XG59XG4iLCJAaW1wb3J0ICd2YXJpYWJsZXMnO1xuQGltcG9ydCAnbWl4aW5zJztcbkBpbXBvcnQgJ2hlbHBlcnMnO1xuQGltcG9ydCAndGlwcHknO1xuXG5AaW5jbHVkZSBib3gtc2l6aW5nKCk7XG5cbi5zaGVwaGVyZC1lbGVtZW50IHtcbiAgQGlmICR1c2UtZHJvcC1zaGFkb3cge1xuICAgIGZpbHRlcjogZHJvcC1zaGFkb3coMCAxcHggNHB4IHJnYmEoMCwgMCwgMCwgMC4yKSk7XG4gIH1cblxuICAmLnNoZXBoZXJkLWhhcy10aXRsZSAuc2hlcGhlcmQtY29udGVudCBoZWFkZXIge1xuICAgIGJhY2tncm91bmQ6ICRzaGVwaGVyZC1oZWFkZXItYmFja2dyb3VuZDtcbiAgICBwYWRkaW5nOiAxZW07XG4gIH1cblxuICAuc2hlcGhlcmQtY29udGVudCB7XG4gICAgYmFja2dyb3VuZDogJHNoZXBoZXJkLXRleHQtYmFja2dyb3VuZDtcbiAgICBmb250LXNpemU6IGluaGVyaXQ7XG4gICAgcGFkZGluZzogMDtcblxuICAgIGhlYWRlciB7XG4gICAgICBAaW5jbHVkZSBwaWUtY2xlYXJmaXg7XG5cbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAkc2hlcGhlcmQtZWxlbWVudC1ib3JkZXItcmFkaXVzO1xuICAgICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6ICRzaGVwaGVyZC1lbGVtZW50LWJvcmRlci1yYWRpdXM7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBsaW5lLWhlaWdodDogMmVtO1xuICAgICAgcGFkZGluZzogMC43NWVtIDAuNzVlbSAwO1xuXG4gICAgICAuc2hlcGhlcmQtdGl0bGUsXG4gICAgICAuc2hlcGhlcmQtY2FuY2VsLWxpbmsge1xuICAgICAgICBmb250LXdlaWdodDogbm9ybWFsO1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgICAgIH1cblxuICAgICAgLnNoZXBoZXJkLXRpdGxlIHtcbiAgICAgICAgY29sb3I6IG1hcF9nZXQoJHNoZXBoZXJkLXRoZW1lLXRleHQtY29sb3JzLCBoZWFkZXIpO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4OiAxIDAgYXV0bztcbiAgICAgICAgZm9udC1zaXplOiAxLjFlbTtcbiAgICAgIH1cblxuICAgICAgLnNoZXBoZXJkLWNhbmNlbC1saW5rIHtcbiAgICAgICAgY29sb3I6IGxpZ2h0ZW4obWFwX2dldCgkc2hlcGhlcmQtdGhlbWUtdGV4dC1jb2xvcnMsIGhlYWRlciksIDcwKTtcbiAgICAgICAgZm9udC1zaXplOiAyZW07XG4gICAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgIHRyYW5zaXRpb246IGNvbG9yIDAuNXMgZWFzZTtcblxuICAgICAgICAmOmJlZm9yZSB7XG4gICAgICAgICAgY29udGVudDogJ1xcMDBkNyc7XG4gICAgICAgIH1cblxuICAgICAgICAmOmhvdmVyIHtcbiAgICAgICAgICBjb2xvcjogbWFwX2dldCgkc2hlcGhlcmQtdGhlbWUtdGV4dC1jb2xvcnMsIGhlYWRlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAuc2hlcGhlcmQtdGV4dCB7XG4gICAgICBjb2xvcjogbWFwX2dldCgkc2hlcGhlcmQtdGhlbWUtdGV4dC1jb2xvcnMsIHRleHQpO1xuICAgICAgbGluZS1oZWlnaHQ6ICRzaGVwaGVyZC10ZXh0LWxpbmUtaGVpZ2h0O1xuICAgICAgcGFkZGluZzogMC43NWVtO1xuXG4gICAgICBhLFxuICAgICAgYTp2aXNpdGVkLFxuICAgICAgYTphY3RpdmUge1xuICAgICAgICBib3JkZXItYm90dG9tOiAxcHggZG90dGVkO1xuICAgICAgICBib3JkZXItYm90dG9tLWNvbG9yOiBtYXBfZ2V0KCRzaGVwaGVyZC10aGVtZS10ZXh0LWNvbG9ycywgdGV4dCk7XG4gICAgICAgIGNvbG9yOiBtYXBfZ2V0KCRzaGVwaGVyZC10aGVtZS10ZXh0LWNvbG9ycywgdGV4dCk7XG4gICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcblxuICAgICAgICAmOmhvdmVyIHtcbiAgICAgICAgICBib3JkZXItYm90dG9tLXN0eWxlOiBzb2xpZDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBwIHtcbiAgICAgICAgbWFyZ2luLXRvcDogMDtcblxuICAgICAgICAmOmxhc3QtY2hpbGQge1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb290ZXIge1xuICAgICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogJHNoZXBoZXJkLWVsZW1lbnQtYm9yZGVyLXJhZGl1cztcbiAgICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAkc2hlcGhlcmQtZWxlbWVudC1ib3JkZXItcmFkaXVzO1xuICAgICAgcGFkZGluZzogMCAwLjc1ZW0gMC43NWVtO1xuXG4gICAgICAuc2hlcGhlcmQtYnV0dG9ucyB7XG4gICAgICAgIGxpc3Qtc3R5bGU6IG5vbmU7XG4gICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XG5cbiAgICAgICAgbGkge1xuICAgICAgICAgIGRpc3BsYXk6IGlubGluZTtcbiAgICAgICAgICBtYXJnaW46IDAgMC41ZW0gMCAwO1xuXG4gICAgICAgICAgJjpsYXN0LWNoaWxkIHtcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAuc2hlcGhlcmQtYnV0dG9uIHtcbiAgICAgICAgICAgIEBpbmNsdWRlIHNoZXBoZXJkLWJ1dHRvbjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImh0bWwsXG5ib2R5IHtcbiAgaGVpZ2h0OiAxMDAlO1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG5ib2R5IHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzYyYzQ2MjtcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KC00NWRlZywgIzYyYzQ2MiwgIzc1YmVhYSk7XG4gIGZvbnQtZmFtaWx5OiBcInByb3hpbWEtbm92YVwiLCBcIkhlbHZldGljYSBOZXVlXCIsIHNhbnMtc2VyaWY7XG4gIG1hcmdpbjogMDtcbn1cblxuLmJ1dHRvbiB7XG4gIGJvcmRlcjogMnB4IHNvbGlkICNmZmZmZmY7XG4gIGNvbG9yOiAjZmZmZmZmO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgZm9udC1zaXplOiAwLjhlbTtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgbGV0dGVyLXNwYWNpbmc6IDNweDtcbiAgbGluZS1oZWlnaHQ6IDEuM2VtO1xuICBwYWRkaW5nOiAxZW0gMS4yNWVtO1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIHdpZHRoOiAxNDBweDtcbn1cblxuLmJ1dHRvbi5kYXJrIHtcbiAgYmFja2dyb3VuZDogI2ZmZmZmZjtcbiAgY29sb3I6ICM3NWJlYWE7XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA1NjhweCkge1xuICAuYnV0dG9uIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBtYXJnaW46IDFlbSBhdXRvIDA7XG4gIH1cbn1cblxuLmhlcm8tc2Nyb2xsIHtcbiAgaGVpZ2h0OiAxMDAlO1xuICBvdmVyZmxvdzogYXV0bztcbiAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoO1xuICB3aWR0aDogMTAwJTtcbn1cblxuLmhlcm8tb3V0ZXIge1xuICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgZGlzcGxheTogdGFibGU7XG4gIGhlaWdodDogMTAwJTtcbiAgcGFkZGluZzogMjBweCAwO1xuICB3aWR0aDogMTAwJTtcbn1cblxuLmhlcm8tb3V0ZXIgLmhlcm8taW5uZXIge1xuICBtYXJnaW46IDAgYXV0byAxZW07XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgd2lkdGg6IDU0MHB4O1xufVxuXG5AbWVkaWEgKG1heC13aWR0aDogNjAwcHgpIHtcbiAgLmhlcm8tb3V0ZXIgLmhlcm8taW5uZXIge1xuICAgIHdpZHRoOiAzNDBweDtcbiAgfVxufVxuXG5AbWVkaWEgKG1heC13aWR0aDogMzYwcHgpIHtcbiAgLmhlcm8tb3V0ZXIgLmhlcm8taW5uZXIge1xuICAgIHdpZHRoOiAyMDBweDtcbiAgfVxufVxuXG4uaGVyby1vdXRlciAuaGVyby1pbm5lciBoMSxcbi5oZXJvLW91dGVyIC5oZXJvLWlubmVyIGgyLFxuLmhlcm8tb3V0ZXIgLmhlcm8taW5uZXIgaDMsXG4uaGVyby1vdXRlciAuaGVyby1pbm5lciBwIHtcbiAgY29sb3I6ICNmZmZmZmY7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGxpbmUtaGVpZ2h0OiAxO1xuICBtYXJnaW46IDAgMCAyMHB4O1xufVxuXG4uaGVyby1vdXRlciAuaGVyby1pbm5lciBoMyB7XG4gIGZvbnQtc2l6ZTogMS4zZW07XG4gIHBhZGRpbmctdG9wOiAxM3B4O1xufVxuXG4uaGVyby1vdXRlciAuaGVyby1pbm5lciBoMSB7XG4gIHBhZGRpbmctdG9wOiAxMHB4O1xufVxuXG4uaGVyby1vdXRlciAuaGVyby1pbm5lciA+ICoge1xuICBvcGFjaXR5OiAwLjM7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAtd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgMC40cztcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjRzO1xufVxuXG5ib2R5Om5vdCguc2hlcGhlcmQtYWN0aXZlKSAuaGVyby1vdXRlciAuaGVyby1pbm5lciA+ICoge1xuICBvcGFjaXR5OiAxO1xuICBwb2ludGVyLWV2ZW50czogYXV0bztcbn1cblxuLmhlcm8tb3V0ZXIgLmhlcm8taW5uZXIgLnNoZXBoZXJkLXRhcmdldC5zaGVwaGVyZC1lbmFibGVkIHtcbiAgb3BhY2l0eTogMTtcbiAgcG9pbnRlci1ldmVudHM6IGF1dG87XG59XG5cbi5oZXJvLW91dGVyIC5oZXJvLWZvbGxvd3VwIHtcbiAgcGFkZGluZy10b3A6IDIwcHg7XG59XG5cbnByZSB7XG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xNSk7XG4gIGxpbmUtaGVpZ2h0OiAxLjRlbTtcbn1cblxuLyoqXG4gKiBTdHlsZXMgdG8gc3VwcG9ydCB1c2FnZSBvZiBUaXBweS5qcyB0b29sdGlwcyAoaHR0cHM6Ly9hdG9taWtzLmdpdGh1Yi5pby90aXBweWpzKVxuICovXG4vKipcbiAqIFRpcHB5IHRvb2x0aXBzIGhhdmUgdGhlIGZvbGxvd2luZyBiYXNlIHN0cnVjdHVyZTpcbiAqXG4gKiA8ZGl2IGNsYXNzPVwidGlwcHktcG9wcGVyXCIgeC1wbGFjZW1lbnQ9XCJ0b3BcIj5cbiAqICAgPGRpdiBjbGFzcz1cInRpcHB5LXRvb2x0aXBcIj5cbiAqICAgICA8ZGl2IGNsYXNzPVwidGlwcHktY29udGVudFwiPlxuICogICAgICAgW1sgQ29udGVudCBIZXJlIF1dXG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZGl2PlxuICogPC9kaXY+XG4gKi9cbi50aXBweS1wb3BwZXIge1xuICB6LWluZGV4OiA5OTk5O1xufVxuXG4udGlwcHktcG9wcGVyIC50aXBweS1hcnJvdyB7XG4gIGJvcmRlcjogMTZweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgY29udGVudDogJyc7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBoZWlnaHQ6IDA7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHdpZHRoOiAwO1xufVxuXG4udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj0ndG9wJ10ge1xuICBtYXJnaW4tYm90dG9tOiAxNnB4O1xufVxuXG4udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj0ndG9wJ10gLnRpcHB5LWFycm93IHtcbiAgYm9yZGVyLWJvdHRvbTogMDtcbiAgYm9yZGVyLXRvcC1jb2xvcjogI2ZmZmZmZjtcbiAgbGVmdDogY2FsYyg1MCUgLSAxNnB4KTtcbn1cblxuLnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49J2JvdHRvbSddIHtcbiAgbWFyZ2luLXRvcDogMTZweDtcbn1cblxuLnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49J2JvdHRvbSddIC50aXBweS1hcnJvdyB7XG4gIGJvcmRlci1ib3R0b20tY29sb3I6ICNlZWVlZWU7XG4gIGJvcmRlci10b3A6IDA7XG4gIGxlZnQ6IGNhbGMoNTAlIC0gMTZweCk7XG59XG5cbi50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePSdsZWZ0J10ge1xuICBtYXJnaW4tcmlnaHQ6IDE2cHg7XG59XG5cbi50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePSdsZWZ0J10gLnRpcHB5LWFycm93IHtcbiAgYm9yZGVyLWxlZnQtY29sb3I6ICNmZmZmZmY7XG4gIGJvcmRlci1yaWdodDogMDtcbiAgbWFyZ2luLXRvcDogLTE2cHg7XG4gIHRvcDogY2FsYyg1MCUgLSAxNnB4KTtcbn1cblxuLnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49J3JpZ2h0J10ge1xuICBtYXJnaW4tbGVmdDogMTZweDtcbn1cblxuLnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49J3JpZ2h0J10gLnRpcHB5LWFycm93IHtcbiAgYm9yZGVyLWxlZnQ6IDA7XG4gIGJvcmRlci1yaWdodC1jb2xvcjogI2ZmZmZmZjtcbiAgdG9wOiBjYWxjKDUwJSAtIDE2cHgpO1xufVxuXG4udGlwcHktcG9wcGVyIC50aXBweS10b29sdGlwIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwKTtcbiAgbWF4LWhlaWdodDogMTAwJTtcbiAgbWF4LXdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiAwO1xuICB3aWR0aDogNDIwcHg7XG59XG5cbi5zaGVwaGVyZC1lbGVtZW50LCAuc2hlcGhlcmQtZWxlbWVudDphZnRlciwgLnNoZXBoZXJkLWVsZW1lbnQ6YmVmb3JlLFxuLnNoZXBoZXJkLWVsZW1lbnQgKixcbi5zaGVwaGVyZC1lbGVtZW50ICo6YWZ0ZXIsXG4uc2hlcGhlcmQtZWxlbWVudCAqOmJlZm9yZSB7XG4gIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xufVxuXG4uc2hlcGhlcmQtZWxlbWVudCB7XG4gIC13ZWJraXQtZmlsdGVyOiBkcm9wLXNoYWRvdygwIDFweCA0cHggcmdiYSgwLCAwLCAwLCAwLjIpKTtcbiAgICAgICAgICBmaWx0ZXI6IGRyb3Atc2hhZG93KDAgMXB4IDRweCByZ2JhKDAsIDAsIDAsIDAuMikpO1xufVxuXG4uc2hlcGhlcmQtZWxlbWVudC5zaGVwaGVyZC1oYXMtdGl0bGUgLnNoZXBoZXJkLWNvbnRlbnQgaGVhZGVyIHtcbiAgYmFja2dyb3VuZDogI2VlZWVlZTtcbiAgcGFkZGluZzogMWVtO1xufVxuXG4uc2hlcGhlcmQtZWxlbWVudCAuc2hlcGhlcmQtY29udGVudCB7XG4gIGJhY2tncm91bmQ6ICNmZmZmZmY7XG4gIGZvbnQtc2l6ZTogaW5oZXJpdDtcbiAgcGFkZGluZzogMDtcbn1cblxuLnNoZXBoZXJkLWVsZW1lbnQgLnNoZXBoZXJkLWNvbnRlbnQgaGVhZGVyIHtcbiAgKnpvb206IDE7XG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XG4gICAgICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDVweDtcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDVweDtcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xuICBkaXNwbGF5OiBmbGV4O1xuICAtd2Via2l0LWJveC1wYWNrOiBjZW50ZXI7XG4gICAgICAtbXMtZmxleC1wYWNrOiBjZW50ZXI7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGxpbmUtaGVpZ2h0OiAyZW07XG4gIHBhZGRpbmc6IDAuNzVlbSAwLjc1ZW0gMDtcbn1cblxuLnNoZXBoZXJkLWVsZW1lbnQgLnNoZXBoZXJkLWNvbnRlbnQgaGVhZGVyOmFmdGVyIHtcbiAgY2xlYXI6IGJvdGg7XG4gIGNvbnRlbnQ6ICcnO1xuICBkaXNwbGF5OiB0YWJsZTtcbn1cblxuLnNoZXBoZXJkLWVsZW1lbnQgLnNoZXBoZXJkLWNvbnRlbnQgaGVhZGVyIC5zaGVwaGVyZC10aXRsZSxcbi5zaGVwaGVyZC1lbGVtZW50IC5zaGVwaGVyZC1jb250ZW50IGhlYWRlciAuc2hlcGhlcmQtY2FuY2VsLWxpbmsge1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbn1cblxuLnNoZXBoZXJkLWVsZW1lbnQgLnNoZXBoZXJkLWNvbnRlbnQgaGVhZGVyIC5zaGVwaGVyZC10aXRsZSB7XG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNzUpO1xuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIC13ZWJraXQtYm94LWZsZXg6IDE7XG4gICAgICAtbXMtZmxleDogMSAwIGF1dG87XG4gICAgICAgICAgZmxleDogMSAwIGF1dG87XG4gIGZvbnQtc2l6ZTogMS4xZW07XG59XG5cbi5zaGVwaGVyZC1lbGVtZW50IC5zaGVwaGVyZC1jb250ZW50IGhlYWRlciAuc2hlcGhlcmQtY2FuY2VsLWxpbmsge1xuICBjb2xvcjogcmdiYSgxNzksIDE3OSwgMTc5LCAwLjc1KTtcbiAgZm9udC1zaXplOiAyZW07XG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIC13ZWJraXQtdHJhbnNpdGlvbjogY29sb3IgMC41cyBlYXNlO1xuICB0cmFuc2l0aW9uOiBjb2xvciAwLjVzIGVhc2U7XG59XG5cbi5zaGVwaGVyZC1lbGVtZW50IC5zaGVwaGVyZC1jb250ZW50IGhlYWRlciAuc2hlcGhlcmQtY2FuY2VsLWxpbms6YmVmb3JlIHtcbiAgY29udGVudDogJ1xcMDBkNyc7XG59XG5cbi5zaGVwaGVyZC1lbGVtZW50IC5zaGVwaGVyZC1jb250ZW50IGhlYWRlciAuc2hlcGhlcmQtY2FuY2VsLWxpbms6aG92ZXIge1xuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjc1KTtcbn1cblxuLnNoZXBoZXJkLWVsZW1lbnQgLnNoZXBoZXJkLWNvbnRlbnQgLnNoZXBoZXJkLXRleHQge1xuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjc1KTtcbiAgbGluZS1oZWlnaHQ6IDEuM2VtO1xuICBwYWRkaW5nOiAwLjc1ZW07XG59XG5cbi5zaGVwaGVyZC1lbGVtZW50IC5zaGVwaGVyZC1jb250ZW50IC5zaGVwaGVyZC10ZXh0IGEsXG4uc2hlcGhlcmQtZWxlbWVudCAuc2hlcGhlcmQtY29udGVudCAuc2hlcGhlcmQtdGV4dCBhOnZpc2l0ZWQsXG4uc2hlcGhlcmQtZWxlbWVudCAuc2hlcGhlcmQtY29udGVudCAuc2hlcGhlcmQtdGV4dCBhOmFjdGl2ZSB7XG4gIGJvcmRlci1ib3R0b206IDFweCBkb3R0ZWQ7XG4gIGJvcmRlci1ib3R0b20tY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43NSk7XG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNzUpO1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG59XG5cbi5zaGVwaGVyZC1lbGVtZW50IC5zaGVwaGVyZC1jb250ZW50IC5zaGVwaGVyZC10ZXh0IGE6aG92ZXIsXG4uc2hlcGhlcmQtZWxlbWVudCAuc2hlcGhlcmQtY29udGVudCAuc2hlcGhlcmQtdGV4dCBhOnZpc2l0ZWQ6aG92ZXIsXG4uc2hlcGhlcmQtZWxlbWVudCAuc2hlcGhlcmQtY29udGVudCAuc2hlcGhlcmQtdGV4dCBhOmFjdGl2ZTpob3ZlciB7XG4gIGJvcmRlci1ib3R0b20tc3R5bGU6IHNvbGlkO1xufVxuXG4uc2hlcGhlcmQtZWxlbWVudCAuc2hlcGhlcmQtY29udGVudCAuc2hlcGhlcmQtdGV4dCBwIHtcbiAgbWFyZ2luLXRvcDogMDtcbn1cblxuLnNoZXBoZXJkLWVsZW1lbnQgLnNoZXBoZXJkLWNvbnRlbnQgLnNoZXBoZXJkLXRleHQgcDpsYXN0LWNoaWxkIHtcbiAgbWFyZ2luLWJvdHRvbTogMDtcbn1cblxuLnNoZXBoZXJkLWVsZW1lbnQgLnNoZXBoZXJkLWNvbnRlbnQgZm9vdGVyIHtcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogNXB4O1xuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogNXB4O1xuICBwYWRkaW5nOiAwIDAuNzVlbSAwLjc1ZW07XG59XG5cbi5zaGVwaGVyZC1lbGVtZW50IC5zaGVwaGVyZC1jb250ZW50IGZvb3RlciAuc2hlcGhlcmQtYnV0dG9ucyB7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XG59XG5cbi5zaGVwaGVyZC1lbGVtZW50IC5zaGVwaGVyZC1jb250ZW50IGZvb3RlciAuc2hlcGhlcmQtYnV0dG9ucyBsaSB7XG4gIGRpc3BsYXk6IGlubGluZTtcbiAgbWFyZ2luOiAwIDAuNWVtIDAgMDtcbn1cblxuLnNoZXBoZXJkLWVsZW1lbnQgLnNoZXBoZXJkLWNvbnRlbnQgZm9vdGVyIC5zaGVwaGVyZC1idXR0b25zIGxpOmxhc3QtY2hpbGQge1xuICBtYXJnaW4tcmlnaHQ6IDA7XG59XG5cbi5zaGVwaGVyZC1lbGVtZW50IC5zaGVwaGVyZC1jb250ZW50IGZvb3RlciAuc2hlcGhlcmQtYnV0dG9ucyBsaSAuc2hlcGhlcmQtYnV0dG9uIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAqZGlzcGxheTogaW5saW5lO1xuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAqdmVydGljYWwtYWxpZ246IGF1dG87XG4gICp6b29tOiAxO1xuICBiYWNrZ3JvdW5kOiAjNTVhODkyO1xuICBib3JkZXI6IDA7XG4gIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43NSk7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XG4gIGZvbnQtc2l6ZTogMC44ZW07XG4gIGxldHRlci1zcGFjaW5nOiAwLjFlbTtcbiAgbGluZS1oZWlnaHQ6IDFlbTtcbiAgcGFkZGluZzogMC43NWVtIDJlbTtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgLXdlYmtpdC10cmFuc2l0aW9uOiBhbGwgMC41cyBlYXNlO1xuICB0cmFuc2l0aW9uOiBhbGwgMC41cyBlYXNlO1xufVxuXG4uc2hlcGhlcmQtZWxlbWVudCAuc2hlcGhlcmQtY29udGVudCBmb290ZXIgLnNoZXBoZXJkLWJ1dHRvbnMgbGkgLnNoZXBoZXJkLWJ1dHRvbjpob3ZlciB7XG4gIGJhY2tncm91bmQ6ICM0NDg2NzU7XG59XG5cbi5zaGVwaGVyZC1lbGVtZW50IC5zaGVwaGVyZC1jb250ZW50IGZvb3RlciAuc2hlcGhlcmQtYnV0dG9ucyBsaSAuc2hlcGhlcmQtYnV0dG9uLnNoZXBoZXJkLWJ1dHRvbi1zZWNvbmRhcnkge1xuICBiYWNrZ3JvdW5kOiAjZTVlNWU1O1xuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjc1KTtcbn1cblxuLnNoZXBoZXJkLWVsZW1lbnQgLnNoZXBoZXJkLWNvbnRlbnQgZm9vdGVyIC5zaGVwaGVyZC1idXR0b25zIGxpIC5zaGVwaGVyZC1idXR0b24uc2hlcGhlcmQtYnV0dG9uLXNlY29uZGFyeTpob3ZlciB7XG4gIGJhY2tncm91bmQ6ICNjYmNiY2I7XG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNzUpO1xufVxuXG4udGlwcHktcG9wcGVyIC50aXBweS1hcnJvdyB7XG4gIGJvcmRlcjogMTZweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgY29udGVudDogJyc7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBoZWlnaHQ6IDA7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgd2lkdGg6IDA7XG59XG5cbi50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePSd0b3AnXSB7XG4gIG1hcmdpbi1ib3R0b206IDE2cHg7XG59XG5cbi50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePSd0b3AnXSAudGlwcHktYXJyb3cge1xuICBib3JkZXItYm90dG9tOiAwO1xuICBib3JkZXItdG9wLWNvbG9yOiAjZmZmZmZmO1xuICBsZWZ0OiBjYWxjKDUwJSAtIDE2cHgpO1xufVxuXG4udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj0nYm90dG9tJ10ge1xuICBtYXJnaW4tdG9wOiAxNnB4O1xufVxuXG4udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj0nYm90dG9tJ10gLnRpcHB5LWFycm93IHtcbiAgYm9yZGVyLWJvdHRvbS1jb2xvcjogI2ZmZmZmZjtcbiAgYm9yZGVyLXRvcDogMDtcbiAgbGVmdDogY2FsYyg1MCUgLSAxNnB4KTtcbn1cblxuLnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49J2xlZnQnXSB7XG4gIG1hcmdpbi1yaWdodDogMTZweDtcbn1cblxuLnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49J2xlZnQnXSAudGlwcHktYXJyb3cge1xuICBib3JkZXItbGVmdC1jb2xvcjogI2ZmZmZmZjtcbiAgYm9yZGVyLXJpZ2h0OiAwO1xuICBtYXJnaW4tdG9wOiAtMTZweDtcbiAgdG9wOiBjYWxjKDUwJSAtIDE2cHgpO1xufVxuXG4udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj0ncmlnaHQnXSB7XG4gIG1hcmdpbi1sZWZ0OiAxNnB4O1xufVxuXG4udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj0ncmlnaHQnXSAudGlwcHktYXJyb3cge1xuICBib3JkZXItbGVmdDogMDtcbiAgYm9yZGVyLXJpZ2h0LWNvbG9yOiAjZmZmZmZmO1xuICB0b3A6IGNhbGMoNTAlIC0gMTZweCk7XG59XG5cbi50aXBweS1wb3BwZXIgLnNoZXBoZXJkLXdlbGNvbWU6bm90KC5zaGVwaGVyZC1oYXMtdGl0bGUpIC5zaGVwaGVyZC1jb250ZW50IGhlYWRlcixcbi50aXBweS1wb3BwZXIgLnNoZXBoZXJkLXdlbGNvbWU6bm90KC5zaGVwaGVyZC1oYXMtdGl0bGUpIC5zaGVwaGVyZC1jb250ZW50IC5zaGVwaGVyZC1oZWFkZXIge1xuICBwYWRkaW5nLWJvdHRvbTogMDtcbn1cblxuLnRpcHB5LXBvcHBlciAuc2hlcGhlcmQtd2VsY29tZSAuc2hlcGhlcmQtY29udGVudCBoZWFkZXIsXG4udGlwcHktcG9wcGVyIC5zaGVwaGVyZC13ZWxjb21lIC5zaGVwaGVyZC1jb250ZW50IC5zaGVwaGVyZC1oZWFkZXIge1xuICBiYWNrZ3JvdW5kOiAjZmZmZmZmO1xufVxuXG4udGlwcHktcG9wcGVyIC5zaGVwaGVyZC13ZWxjb21lIC5zaGVwaGVyZC1jb250ZW50IC5zaGVwaGVyZC10ZXh0IHtcbiAgY29sb3I6ICMzMzY0NTc7XG59XG4iLCJAbWl4aW4gcGllLWNsZWFyZml4IHtcbiAgKnpvb206IDE7XG5cbiAgJjphZnRlciB7XG4gICAgY2xlYXI6IGJvdGg7XG4gICAgY29udGVudDogJyc7XG4gICAgZGlzcGxheTogdGFibGU7XG4gIH1cbn1cbiIsIi8vIFRvRG86IE1vcmUgcmVsaWFibGUgZnVuY3Rpb24gdG8gZ2V0IGJlc3QgcmVhZGFibGUgdGV4dCBjb2xvclxuLy8gTURDLVdlYiBoYXMgc29tZSB2ZXJ5IHVzZWZ1bCBmdW5jdGlvbnMgYXQgaHR0cHM6Ly9naXRodWIuY29tL21hdGVyaWFsLWNvbXBvbmVudHMvbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIvYmxvYi9tYXN0ZXIvcGFja2FnZXMvbWRjLXRoZW1lL19mdW5jdGlvbnMuc2Nzc1xuLy8gTW9yZSBkZXRhaWxzIGF0IGh0dHBzOi8vbWVkaXVtLmNvbS9kZXYtY2hhbm5lbC91c2luZy1zYXNzLXRvLWF1dG9tYXRpY2FsbHktcGljay10ZXh0LWNvbG9ycy00YmE3NjQ1ZDI3OTZcbkBmdW5jdGlvbiBzZXQtdGV4dC1jb2xvcigkY29sb3IpIHtcbiAgQGlmIChsaWdodG5lc3MoJGNvbG9yKSA+IDYwKSB7XG4gICAgQHJldHVybiAjMDAwMDAwO1xuICB9XG4gIEBlbHNlIHtcbiAgICBAcmV0dXJuICNmZmZmZmY7XG4gIH1cbn1cbiIsIkBtaXhpbiBpbmxpbmUtYmxvY2sge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICpkaXNwbGF5OiBpbmxpbmU7XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gICp2ZXJ0aWNhbC1hbGlnbjogYXV0bztcbiAgKnpvb206IDE7XG59XG4iLCJAbWl4aW4gc2hlcGhlcmQtYnV0dG9uIHtcbiAgQGluY2x1ZGUgaW5saW5lLWJsb2NrO1xuXG4gIGJhY2tncm91bmQ6ICRzaGVwaGVyZC10aGVtZS1wcmltYXJ5O1xuICBib3JkZXI6IDA7XG4gIGJvcmRlci1yYWRpdXM6ICRzaGVwaGVyZC1idXR0b24tYm9yZGVyLXJhZGl1cztcbiAgY29sb3I6IG1hcF9nZXQoJHNoZXBoZXJkLXRoZW1lLXRleHQtY29sb3JzLCBwcmltYXJ5KTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBmb250LWZhbWlseTogaW5oZXJpdDtcbiAgZm9udC1zaXplOiAwLjhlbTtcbiAgbGV0dGVyLXNwYWNpbmc6IDAuMWVtO1xuICBsaW5lLWhlaWdodDogMWVtO1xuICBwYWRkaW5nOiAwLjc1ZW0gMmVtO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICB0cmFuc2l0aW9uOiBhbGwgMC41cyBlYXNlO1xuXG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQ6IGRhcmtlbigkc2hlcGhlcmQtdGhlbWUtcHJpbWFyeSwgMTApO1xuICB9XG5cbiAgJi5zaGVwaGVyZC1idXR0b24tc2Vjb25kYXJ5IHtcbiAgICBiYWNrZ3JvdW5kOiAkc2hlcGhlcmQtdGhlbWUtc2Vjb25kYXJ5O1xuICAgIGNvbG9yOiBtYXBfZ2V0KCRzaGVwaGVyZC10aGVtZS10ZXh0LWNvbG9ycywgc2Vjb25kYXJ5KTtcblxuICAgICY6aG92ZXIge1xuICAgICAgYmFja2dyb3VuZDogZGFya2VuKCRzaGVwaGVyZC10aGVtZS1zZWNvbmRhcnksIDEwKTtcbiAgICAgIGNvbG9yOiBkYXJrZW4obWFwX2dldCgkc2hlcGhlcmQtdGhlbWUtdGV4dC1jb2xvcnMsIHNlY29uZGFyeSksIDEwKTtcbiAgICB9XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0= */